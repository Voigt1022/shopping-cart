{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","grid","marginTop","card","width","height","media","marginLeft","sizes","Selectsize","prodcut","Container","align","ButtonGroup","color","aria-label","map","size","Button","key","Prodcut","product","classes","Card","className","CardActionArea","CardMedia","component","image","sku","CardContent","Typography","gutterBottom","variant","title","description","currencyFormat","price","CardActions","ProductGrid","products","gird","Grid","container","spacing","justify","item","App","useState","data","setData","Object","values","useEffect","a","fetch","response","json","fetchProducts","Fragment","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAqCMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CAEJC,UAAW,SAQbC,KAAM,CACJC,MAAO,QACPC,OAAQ,SAEVC,MAAO,CACLD,OAAQ,QACRD,MAAO,QACPG,WAAa,YAIXC,EAAQ,CAAC,IAAK,IAAK,IAAK,MAExBC,EAAa,SAAC,GAAc,EAAbC,QACHZ,IAEhB,OACE,kBAACa,EAAA,EAAD,CAAWC,MAAQ,UACnB,kBAACC,EAAA,EAAD,CAAaC,MAAM,UAAUC,aAAW,iCACrCP,EAAMQ,KAAI,SAAAC,GAAI,OACb,kBAACC,EAAA,EAAD,CAAQC,IAAOF,EAAMA,KAAO,UACzBA,SAQLG,EAAU,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACVC,EAAUxB,IAEhB,OACE,kBAACyB,EAAA,EAAD,CAAMC,UAAWF,EAAQnB,MACvB,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEF,UAAWF,EAAQhB,MACnBqB,UAAY,MACZC,MAAO,cAAcP,EAAQQ,IAAI,WAEnC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,QAAQrB,MAAQ,UAC9CS,EAAQa,OAEX,kBAACH,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,QAAQrB,MAAQ,UACtB,KAAxBS,EAAQc,YAAqB,iBAAmBd,EAAQc,aAE3D,kBAACJ,EAAA,EAAD,CAAYE,QAAQ,KAAKrB,MAAQ,UAC9BS,EAAQe,eADX,IAC4Bf,EAAQgB,SAIxC,kBAACC,EAAA,EAAD,KAIE,kBAAC,EAAD,MACA,kBAACpB,EAAA,EAAD,CAAQe,QAAQ,YAAYnB,MAAQ,UAAUG,KAAO,SAArD,kBAQFsB,EAAc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACdlB,EAAUxB,IAChB,OACE,yBAAK0B,UAAWF,EAAQmB,MACtB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAU,UACnCL,EAASxB,KAAI,SAAAK,GAAO,OACnB,kBAACqB,EAAA,EAAD,CAAMI,MAAI,EAAC3B,IAAOE,EAAQQ,KACxB,kBAAC,EAAD,CAASR,QAAWA,WAQjB0B,EAhHH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,KAEVV,EAAWW,OAAOC,OAAOH,GAU/B,OATAI,qBAAU,YACW,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,wBADT,cACdC,EADc,gBAEDA,EAASC,OAFR,OAEdA,EAFc,OAGpBP,EAAQO,GAHY,2CAAH,qDAKnBC,KACC,IAGD,kBAAC,IAAMC,SAAP,KACE,kBAAChD,EAAA,EAAD,CAAWiD,SAAW,MACtB,kBAAC,EAAD,CAAapB,SAAYA,OCnBXqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.077f893a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Typography from '@material-ui/core/Typography';\nimport Popover from '@material-ui/core/Popover'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\n\n\nconst App = () => {\n  const [data, setData] = useState({});\n  const products = Object.values(data);\n  useEffect(() => {\n    const fetchProducts = async () => {\n      const response = await fetch('./data/products.json');\n      const json = await response.json();\n      setData(json);\n    };\n    fetchProducts();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Container maxWidth = \"lg\">\n      <ProductGrid products = {products}/>\n      </Container>\n    </React.Fragment>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  grid: {\n    // flexGrow: 1,\n    marginTop: \"300px\",\n  },\n\n  // paper: {\n  //   padding: theme.spacing(2),\n  //   textAlign: 'center',\n  //   color: theme.palette.text.secondary,\n  // },\n  card: {\n    width: \"350px\",\n    height: \"550px\"\n  },\n  media: {\n    height: \"350px\",\n    width: \"245px\",\n    marginLeft : \"50px\"\n  },\n}));\n\nconst sizes = [\"S\", \"M\", \"L\", \"XL\"]\n\nconst Selectsize = ({prodcut}) => {\n  const classes = useStyles();\n\n  return (\n    <Container align = 'center' >\n    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n      {sizes.map(size => \n        <Button key = {size} size = 'medium'>\n          {size}\n        </Button>\n      )}\n    </ButtonGroup>\n  </Container>\n  );\n};\n\nconst Prodcut = ({product}) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          component = \"img\"\n          image={\"./products/\"+product.sku+\"_1.jpg\"}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"body1\" align = \"center\">\n            {product.title}\n          </Typography>\n          <Typography gutterBottom variant=\"body2\" align = \"center\">\n            {product.description === \"\" ? \"No Description\" : product.description}\n          </Typography>\n          <Typography variant=\"h5\" align = \"center\">\n            {product.currencyFormat} {product.price}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        {/* <Button size=\"small\" color=\"primary\">\n          Share\n        </Button> */}\n        <Selectsize />\n        <Button variant=\"contained\" color = 'primary' size = 'large'>\n          Add to cart\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nconst ProductGrid = ({products}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.gird}>\n      <Grid container spacing={5} justify = \"center\">\n        {products.map(product => \n          <Grid item key = {product.sku}>\n            <Prodcut product = {product} />\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}